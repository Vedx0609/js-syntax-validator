
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ASSIGN BITWISE BOOLEAN BREAK CASE COLON COMMA COMPARISON C_LOG DECREMENT DEFAULT DIVIDE IDENTIFIER INCREMENT LBRACKET LOGICAL LPAREN MINUS NULL NUMBER PLUS RBRACKET RPAREN SEMICOLON SHORTHAND STRING SWITCH TIMES TYPE UBITWISE ULOGICALstatement_switch : SWITCH LPAREN s_expression RPAREN LBRACKET body RBRACKET s_expression : expression  body : cases\n             | cases DEFAULT COLON statements  cases : case\n              | case cases  case : CASE NUMBER COLON statements BREAK SEMICOLON  statements : statement\n                   | statement statements  statement : assign_stmt\n                  | c_log_stmt  c_log_stmt : C_LOG LPAREN args RPAREN  args : expression\n             | expression COMMA args  assign_stmt : TYPE IDENTIFIER ASSIGN expressions\n                    | TYPE IDENTIFIER ASSIGN expression COMMA multiple_assign\n                    | IDENTIFIER ASSIGN expressions\n                    | IDENTIFIER SHORTHAND expressions\n                    | IDENTIFIER INCREMENT\n                    | IDENTIFIER DECREMENT\n                    | INCREMENT IDENTIFIER\n                    | DECREMENT IDENTIFIER  multiple_assign : IDENTIFIER ASSIGN expressions\n                        | IDENTIFIER ASSIGN expressions COMMA multiple_assign expressions : expression\n                   | expression LOGICAL expressionsexpression : IDENTIFIER\n                  | NUMBER\n                  | BOOLEAN\n                  | NULL\n                  | STRING\n                  | expression BITWISE expression\n                  | UBITWISE expression\n                  | expression COMPARISON expression\n                  | expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expression\n                  | LPAREN expression RPAREN\n                  | ULOGICAL expression'
    
_lr_action_items = {'SWITCH':([0,],[2,]),'$end':([1,36,],[0,-1,]),'LPAREN':([2,3,4,12,13,16,17,18,19,20,21,50,54,55,60,62,71,73,79,],[3,4,4,4,4,4,4,4,4,4,4,60,4,4,4,4,4,4,4,]),'IDENTIFIER':([3,4,7,8,9,10,11,12,13,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,40,41,43,44,45,46,48,49,54,55,56,57,58,59,60,62,63,64,65,69,70,71,72,73,74,75,78,79,80,81,82,],[7,7,-27,-28,-29,-30,-31,7,7,7,7,7,7,7,7,-33,-40,-39,-32,-34,-35,-36,-37,-38,47,47,47,-10,-11,53,58,59,7,7,-19,-20,-21,-22,7,7,-17,-25,-18,-15,-25,7,-12,7,77,-26,-16,7,-23,77,-24,]),'NUMBER':([3,4,12,13,16,17,18,19,20,21,35,54,55,60,62,71,73,79,],[8,8,8,8,8,8,8,8,8,8,39,8,8,8,8,8,8,8,]),'BOOLEAN':([3,4,12,13,16,17,18,19,20,21,54,55,60,62,71,73,79,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'NULL':([3,4,12,13,16,17,18,19,20,21,54,55,60,62,71,73,79,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'STRING':([3,4,12,13,16,17,18,19,20,21,54,55,60,62,71,73,79,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'UBITWISE':([3,4,12,13,16,17,18,19,20,21,54,55,60,62,71,73,79,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'ULOGICAL':([3,4,12,13,16,17,18,19,20,21,54,55,60,62,71,73,79,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'RPAREN':([5,6,7,8,9,10,11,14,22,23,24,26,27,28,29,30,31,66,67,76,],[15,-2,-27,-28,-29,-30,-31,24,-33,-40,-39,-32,-34,-35,-36,-37,-38,72,-13,-14,]),'BITWISE':([6,7,8,9,10,11,14,22,23,24,26,27,28,29,30,31,64,67,70,],[16,-27,-28,-29,-30,-31,16,16,16,-39,16,16,16,16,16,16,16,16,16,]),'COMPARISON':([6,7,8,9,10,11,14,22,23,24,26,27,28,29,30,31,64,67,70,],[17,-27,-28,-29,-30,-31,17,17,17,-39,17,17,17,17,17,17,17,17,17,]),'PLUS':([6,7,8,9,10,11,14,22,23,24,26,27,28,29,30,31,64,67,70,],[18,-27,-28,-29,-30,-31,18,18,18,-39,18,18,18,18,18,18,18,18,18,]),'MINUS':([6,7,8,9,10,11,14,22,23,24,26,27,28,29,30,31,64,67,70,],[19,-27,-28,-29,-30,-31,19,19,19,-39,19,19,19,19,19,19,19,19,19,]),'TIMES':([6,7,8,9,10,11,14,22,23,24,26,27,28,29,30,31,64,67,70,],[20,-27,-28,-29,-30,-31,20,20,20,-39,20,20,20,20,20,20,20,20,20,]),'DIVIDE':([6,7,8,9,10,11,14,22,23,24,26,27,28,29,30,31,64,67,70,],[21,-27,-28,-29,-30,-31,21,21,21,-39,21,21,21,21,21,21,21,21,21,]),'LOGICAL':([7,8,9,10,11,22,23,24,26,27,28,29,30,31,64,70,],[-27,-28,-29,-30,-31,-33,-40,-39,-32,-34,-35,-36,-37,-38,71,71,]),'TYPE':([7,8,9,10,11,22,23,24,26,27,28,29,30,31,40,41,43,44,45,56,57,58,59,63,64,65,69,70,72,75,78,80,82,],[-27,-28,-29,-30,-31,-33,-40,-39,-32,-34,-35,-36,-37,-38,46,46,46,-10,-11,-19,-20,-21,-22,-17,-25,-18,-15,-25,-12,-26,-16,-23,-24,]),'INCREMENT':([7,8,9,10,11,22,23,24,26,27,28,29,30,31,40,41,43,44,45,47,56,57,58,59,63,64,65,69,70,72,75,78,80,82,],[-27,-28,-29,-30,-31,-33,-40,-39,-32,-34,-35,-36,-37,-38,48,48,48,-10,-11,56,-19,-20,-21,-22,-17,-25,-18,-15,-25,-12,-26,-16,-23,-24,]),'DECREMENT':([7,8,9,10,11,22,23,24,26,27,28,29,30,31,40,41,43,44,45,47,56,57,58,59,63,64,65,69,70,72,75,78,80,82,],[-27,-28,-29,-30,-31,-33,-40,-39,-32,-34,-35,-36,-37,-38,49,49,49,-10,-11,57,-19,-20,-21,-22,-17,-25,-18,-15,-25,-12,-26,-16,-23,-24,]),'C_LOG':([7,8,9,10,11,22,23,24,26,27,28,29,30,31,40,41,43,44,45,56,57,58,59,63,64,65,69,70,72,75,78,80,82,],[-27,-28,-29,-30,-31,-33,-40,-39,-32,-34,-35,-36,-37,-38,50,50,50,-10,-11,-19,-20,-21,-22,-17,-25,-18,-15,-25,-12,-26,-16,-23,-24,]),'RBRACKET':([7,8,9,10,11,22,23,24,26,27,28,29,30,31,32,33,34,38,42,43,44,45,52,56,57,58,59,63,64,65,68,69,70,72,75,78,80,82,],[-27,-28,-29,-30,-31,-33,-40,-39,-32,-34,-35,-36,-37,-38,36,-3,-5,-6,-4,-8,-10,-11,-9,-19,-20,-21,-22,-17,-25,-18,-7,-15,-25,-12,-26,-16,-23,-24,]),'BREAK':([7,8,9,10,11,22,23,24,26,27,28,29,30,31,43,44,45,51,52,56,57,58,59,63,64,65,69,70,72,75,78,80,82,],[-27,-28,-29,-30,-31,-33,-40,-39,-32,-34,-35,-36,-37,-38,-8,-10,-11,61,-9,-19,-20,-21,-22,-17,-25,-18,-15,-25,-12,-26,-16,-23,-24,]),'COMMA':([7,8,9,10,11,22,23,24,26,27,28,29,30,31,64,67,70,75,80,],[-27,-28,-29,-30,-31,-33,-40,-39,-32,-34,-35,-36,-37,-38,-25,73,74,-26,81,]),'LBRACKET':([15,],[25,]),'CASE':([25,34,68,],[35,35,-7,]),'DEFAULT':([33,34,38,68,],[37,-5,-6,-7,]),'COLON':([37,39,],[40,41,]),'ASSIGN':([47,53,77,],[54,62,79,]),'SHORTHAND':([47,],[55,]),'SEMICOLON':([61,],[68,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement_switch':([0,],[1,]),'s_expression':([3,],[5,]),'expression':([3,4,12,13,16,17,18,19,20,21,54,55,60,62,71,73,79,],[6,14,22,23,26,27,28,29,30,31,64,64,67,70,64,67,64,]),'body':([25,],[32,]),'cases':([25,34,],[33,38,]),'case':([25,34,],[34,34,]),'statements':([40,41,43,],[42,51,52,]),'statement':([40,41,43,],[43,43,43,]),'assign_stmt':([40,41,43,],[44,44,44,]),'c_log_stmt':([40,41,43,],[45,45,45,]),'expressions':([54,55,62,71,79,],[63,65,69,75,80,]),'args':([60,73,],[66,76,]),'multiple_assign':([74,81,],[78,82,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement_switch","S'",1,None,None,None),
  ('statement_switch -> SWITCH LPAREN s_expression RPAREN LBRACKET body RBRACKET','statement_switch',7,'p_statement_switch','yacc_switch.py',5),
  ('s_expression -> expression','s_expression',1,'p_s_expression','yacc_switch.py',9),
  ('body -> cases','body',1,'p_body','yacc_switch.py',13),
  ('body -> cases DEFAULT COLON statements','body',4,'p_body','yacc_switch.py',14),
  ('cases -> case','cases',1,'p_cases','yacc_switch.py',17),
  ('cases -> case cases','cases',2,'p_cases','yacc_switch.py',18),
  ('case -> CASE NUMBER COLON statements BREAK SEMICOLON','case',6,'p_case','yacc_switch.py',21),
  ('statements -> statement','statements',1,'p_statements','yacc_switch.py',24),
  ('statements -> statement statements','statements',2,'p_statements','yacc_switch.py',25),
  ('statement -> assign_stmt','statement',1,'p_statement','yacc_switch.py',28),
  ('statement -> c_log_stmt','statement',1,'p_statement','yacc_switch.py',29),
  ('c_log_stmt -> C_LOG LPAREN args RPAREN','c_log_stmt',4,'p_c_log_stmt','yacc_switch.py',32),
  ('args -> expression','args',1,'p_args','yacc_switch.py',35),
  ('args -> expression COMMA args','args',3,'p_args','yacc_switch.py',36),
  ('assign_stmt -> TYPE IDENTIFIER ASSIGN expressions','assign_stmt',4,'p_assign_stmt','yacc_switch.py',39),
  ('assign_stmt -> TYPE IDENTIFIER ASSIGN expression COMMA multiple_assign','assign_stmt',6,'p_assign_stmt','yacc_switch.py',40),
  ('assign_stmt -> IDENTIFIER ASSIGN expressions','assign_stmt',3,'p_assign_stmt','yacc_switch.py',41),
  ('assign_stmt -> IDENTIFIER SHORTHAND expressions','assign_stmt',3,'p_assign_stmt','yacc_switch.py',42),
  ('assign_stmt -> IDENTIFIER INCREMENT','assign_stmt',2,'p_assign_stmt','yacc_switch.py',43),
  ('assign_stmt -> IDENTIFIER DECREMENT','assign_stmt',2,'p_assign_stmt','yacc_switch.py',44),
  ('assign_stmt -> INCREMENT IDENTIFIER','assign_stmt',2,'p_assign_stmt','yacc_switch.py',45),
  ('assign_stmt -> DECREMENT IDENTIFIER','assign_stmt',2,'p_assign_stmt','yacc_switch.py',46),
  ('multiple_assign -> IDENTIFIER ASSIGN expressions','multiple_assign',3,'p_multiple_assign','yacc_switch.py',49),
  ('multiple_assign -> IDENTIFIER ASSIGN expressions COMMA multiple_assign','multiple_assign',5,'p_multiple_assign','yacc_switch.py',50),
  ('expressions -> expression','expressions',1,'p_expressions','yacc_switch.py',53),
  ('expressions -> expression LOGICAL expressions','expressions',3,'p_expressions','yacc_switch.py',54),
  ('expression -> IDENTIFIER','expression',1,'p_expression','yacc_switch.py',57),
  ('expression -> NUMBER','expression',1,'p_expression','yacc_switch.py',58),
  ('expression -> BOOLEAN','expression',1,'p_expression','yacc_switch.py',59),
  ('expression -> NULL','expression',1,'p_expression','yacc_switch.py',60),
  ('expression -> STRING','expression',1,'p_expression','yacc_switch.py',61),
  ('expression -> expression BITWISE expression','expression',3,'p_expression','yacc_switch.py',62),
  ('expression -> UBITWISE expression','expression',2,'p_expression','yacc_switch.py',63),
  ('expression -> expression COMPARISON expression','expression',3,'p_expression','yacc_switch.py',64),
  ('expression -> expression PLUS expression','expression',3,'p_expression','yacc_switch.py',65),
  ('expression -> expression MINUS expression','expression',3,'p_expression','yacc_switch.py',66),
  ('expression -> expression TIMES expression','expression',3,'p_expression','yacc_switch.py',67),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression','yacc_switch.py',68),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression','yacc_switch.py',69),
  ('expression -> ULOGICAL expression','expression',2,'p_expression','yacc_switch.py',70),
]
