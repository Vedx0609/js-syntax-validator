
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ASSIGN BITWISE BOOLEAN COMMA COMPARISON C_LOG DIVIDE ELSE IDENTIFIER IF LBRACKET LOGICAL LPAREN MINUS NULL NUMBER PLUS RBRACKET RPAREN SHORTHAND STRING TIMES TYPE UBITWISE ULOGICALif_else : IF LPAREN expressions RPAREN LBRACKET statements RBRACKET ELSE LBRACKET statements RBRACKET\n               | IF LPAREN expressions RPAREN LBRACKET statements RBRACKETexpressions : expression LOGICAL expression\n                   | expressionexpression : expression COMPARISON expression\n                  | expression BITWISE expression\n                  | expression PLUS expression\n                  | expression MINUS expression\n                  | expression DIVIDE expression\n                  | expression TIMES expression\n                  | ULOGICAL expression\n                  | UBITWISE expression\n                  | LPAREN expression RPAREN\n                  | IDENTIFIER\n                  | NUMBER\n                  | BOOLEAN\n                  | NULL\n                  | STRINGstatements : statement statements\n                  | statement\n                  |statement : assign_stmt\n                 | c_log_stmt\n                 | IDENTIFIERc_log_stmt : C_LOG LPAREN args RPARENargs : expression\n            | expression COMMA argsassign_stmt : TYPE IDENTIFIER ASSIGN expressions\n                   | TYPE IDENTIFIER ASSIGN expression COMMA multiple_assign\n                   | IDENTIFIER ASSIGN expressions\n                   | IDENTIFIER SHORTHAND expressionsmultiple_assign : IDENTIFIER ASSIGN expressions\n                       | IDENTIFIER ASSIGN expressions COMMA multiple_assign'
    
_lr_action_items = {'IF':([0,],[2,]),'$end':([1,41,61,],[0,-2,-1,]),'LPAREN':([2,3,4,7,8,16,17,18,19,20,21,22,40,43,44,46,50,57,64,],[3,4,4,4,4,4,4,4,4,4,4,4,46,4,4,4,4,4,4,]),'ULOGICAL':([3,4,7,8,16,17,18,19,20,21,22,43,44,46,50,57,64,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'UBITWISE':([3,4,7,8,16,17,18,19,20,21,22,43,44,46,50,57,64,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'IDENTIFIER':([3,4,6,7,8,9,10,11,12,13,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,35,36,37,38,39,43,44,46,48,49,50,53,54,55,56,57,59,63,64,65,66,67,],[9,9,-4,9,9,-14,-15,-16,-17,-18,9,9,9,9,9,9,9,-11,-12,-13,38,-3,-5,-6,-7,-8,-9,-10,38,-22,-23,-24,45,9,9,9,-30,-31,9,38,-28,-4,-25,9,62,-29,9,-32,62,-33,]),'NUMBER':([3,4,7,8,16,17,18,19,20,21,22,43,44,46,50,57,64,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'BOOLEAN':([3,4,7,8,16,17,18,19,20,21,22,43,44,46,50,57,64,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'NULL':([3,4,7,8,16,17,18,19,20,21,22,43,44,46,50,57,64,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'STRING':([3,4,7,8,16,17,18,19,20,21,22,43,44,46,50,57,64,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'RPAREN':([5,6,9,10,11,12,13,14,23,24,25,27,28,29,30,31,32,33,51,52,60,],[15,-4,-14,-15,-16,-17,-18,25,-11,-12,-13,-3,-5,-6,-7,-8,-9,-10,56,-26,-27,]),'LOGICAL':([6,9,10,11,12,13,23,24,25,28,29,30,31,32,33,55,],[16,-14,-15,-16,-17,-18,-11,-12,-13,-5,-6,-7,-8,-9,-10,16,]),'TYPE':([6,9,10,11,12,13,23,24,25,26,27,28,29,30,31,32,33,35,36,37,38,48,49,53,54,55,56,63,65,67,],[-4,-14,-15,-16,-17,-18,-11,-12,-13,39,-3,-5,-6,-7,-8,-9,-10,39,-22,-23,-24,-30,-31,39,-28,-4,-25,-29,-32,-33,]),'C_LOG':([6,9,10,11,12,13,23,24,25,26,27,28,29,30,31,32,33,35,36,37,38,48,49,53,54,55,56,63,65,67,],[-4,-14,-15,-16,-17,-18,-11,-12,-13,40,-3,-5,-6,-7,-8,-9,-10,40,-22,-23,-24,-30,-31,40,-28,-4,-25,-29,-32,-33,]),'RBRACKET':([6,9,10,11,12,13,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,42,48,49,53,54,55,56,58,63,65,67,],[-4,-14,-15,-16,-17,-18,-11,-12,-13,-21,-3,-5,-6,-7,-8,-9,-10,41,-20,-22,-23,-24,-19,-30,-31,-21,-28,-4,-25,61,-29,-32,-33,]),'COMMA':([6,9,10,11,12,13,23,24,25,27,28,29,30,31,32,33,52,55,65,],[-4,-14,-15,-16,-17,-18,-11,-12,-13,-3,-5,-6,-7,-8,-9,-10,57,59,66,]),'COMPARISON':([6,9,10,11,12,13,14,23,24,25,27,28,29,30,31,32,33,52,55,],[17,-14,-15,-16,-17,-18,17,17,17,-13,17,17,17,17,17,17,17,17,17,]),'BITWISE':([6,9,10,11,12,13,14,23,24,25,27,28,29,30,31,32,33,52,55,],[18,-14,-15,-16,-17,-18,18,18,18,-13,18,18,18,18,18,18,18,18,18,]),'PLUS':([6,9,10,11,12,13,14,23,24,25,27,28,29,30,31,32,33,52,55,],[19,-14,-15,-16,-17,-18,19,19,19,-13,19,19,19,19,19,19,19,19,19,]),'MINUS':([6,9,10,11,12,13,14,23,24,25,27,28,29,30,31,32,33,52,55,],[20,-14,-15,-16,-17,-18,20,20,20,-13,20,20,20,20,20,20,20,20,20,]),'DIVIDE':([6,9,10,11,12,13,14,23,24,25,27,28,29,30,31,32,33,52,55,],[21,-14,-15,-16,-17,-18,21,21,21,-13,21,21,21,21,21,21,21,21,21,]),'TIMES':([6,9,10,11,12,13,14,23,24,25,27,28,29,30,31,32,33,52,55,],[22,-14,-15,-16,-17,-18,22,22,22,-13,22,22,22,22,22,22,22,22,22,]),'LBRACKET':([15,47,],[26,53,]),'ASSIGN':([38,45,62,],[43,50,64,]),'SHORTHAND':([38,],[44,]),'ELSE':([41,],[47,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'if_else':([0,],[1,]),'expressions':([3,43,44,50,64,],[5,48,49,54,65,]),'expression':([3,4,7,8,16,17,18,19,20,21,22,43,44,46,50,57,64,],[6,14,23,24,27,28,29,30,31,32,33,6,6,52,55,52,6,]),'statements':([26,35,53,],[34,42,58,]),'statement':([26,35,53,],[35,35,35,]),'assign_stmt':([26,35,53,],[36,36,36,]),'c_log_stmt':([26,35,53,],[37,37,37,]),'args':([46,57,],[51,60,]),'multiple_assign':([59,66,],[63,67,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> if_else","S'",1,None,None,None),
  ('if_else -> IF LPAREN expressions RPAREN LBRACKET statements RBRACKET ELSE LBRACKET statements RBRACKET','if_else',11,'p_if_else','yacc_if_final.py',5),
  ('if_else -> IF LPAREN expressions RPAREN LBRACKET statements RBRACKET','if_else',7,'p_if_else','yacc_if_final.py',6),
  ('expressions -> expression LOGICAL expression','expressions',3,'p_expressions','yacc_if_final.py',10),
  ('expressions -> expression','expressions',1,'p_expressions','yacc_if_final.py',11),
  ('expression -> expression COMPARISON expression','expression',3,'p_expression','yacc_if_final.py',14),
  ('expression -> expression BITWISE expression','expression',3,'p_expression','yacc_if_final.py',15),
  ('expression -> expression PLUS expression','expression',3,'p_expression','yacc_if_final.py',16),
  ('expression -> expression MINUS expression','expression',3,'p_expression','yacc_if_final.py',17),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression','yacc_if_final.py',18),
  ('expression -> expression TIMES expression','expression',3,'p_expression','yacc_if_final.py',19),
  ('expression -> ULOGICAL expression','expression',2,'p_expression','yacc_if_final.py',20),
  ('expression -> UBITWISE expression','expression',2,'p_expression','yacc_if_final.py',21),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression','yacc_if_final.py',22),
  ('expression -> IDENTIFIER','expression',1,'p_expression','yacc_if_final.py',23),
  ('expression -> NUMBER','expression',1,'p_expression','yacc_if_final.py',24),
  ('expression -> BOOLEAN','expression',1,'p_expression','yacc_if_final.py',25),
  ('expression -> NULL','expression',1,'p_expression','yacc_if_final.py',26),
  ('expression -> STRING','expression',1,'p_expression','yacc_if_final.py',27),
  ('statements -> statement statements','statements',2,'p_statements','yacc_if_final.py',30),
  ('statements -> statement','statements',1,'p_statements','yacc_if_final.py',31),
  ('statements -> <empty>','statements',0,'p_statements','yacc_if_final.py',32),
  ('statement -> assign_stmt','statement',1,'p_statement','yacc_if_final.py',35),
  ('statement -> c_log_stmt','statement',1,'p_statement','yacc_if_final.py',36),
  ('statement -> IDENTIFIER','statement',1,'p_statement','yacc_if_final.py',37),
  ('c_log_stmt -> C_LOG LPAREN args RPAREN','c_log_stmt',4,'p_c_log_stmt','yacc_if_final.py',40),
  ('args -> expression','args',1,'p_args','yacc_if_final.py',43),
  ('args -> expression COMMA args','args',3,'p_args','yacc_if_final.py',44),
  ('assign_stmt -> TYPE IDENTIFIER ASSIGN expressions','assign_stmt',4,'p_assign_stmt','yacc_if_final.py',47),
  ('assign_stmt -> TYPE IDENTIFIER ASSIGN expression COMMA multiple_assign','assign_stmt',6,'p_assign_stmt','yacc_if_final.py',48),
  ('assign_stmt -> IDENTIFIER ASSIGN expressions','assign_stmt',3,'p_assign_stmt','yacc_if_final.py',49),
  ('assign_stmt -> IDENTIFIER SHORTHAND expressions','assign_stmt',3,'p_assign_stmt','yacc_if_final.py',50),
  ('multiple_assign -> IDENTIFIER ASSIGN expressions','multiple_assign',3,'p_multiple_assign','yacc_if_final.py',53),
  ('multiple_assign -> IDENTIFIER ASSIGN expressions COMMA multiple_assign','multiple_assign',5,'p_multiple_assign','yacc_if_final.py',54),
]
